user  root; #进程用户，一般不使用root
worker_processes  auto; #进程数，auto即根据核心数生成进程数
worker_cpu_affinity auto; #多核情况下用哪些核，一般auto即可
worker_rlimit_nofile 51200; #nginx 最大文件打开数，一般与 ulimit -n 保持一致
error_log  /var/log/nginx/error.log warn; #日志记录位置和级别
pid        /var/run/nginx.pid; #pid位置
events {
	use epoll; #Linux内核2.6版本及以后就用这个
	multi_accept on;	#尽可能多地接受请求，打开就行
	worker_connections  4096; #同一时间nginx的一个进程可以处理的最大请求数，不宜设置的过高，会吃满内存
}
stream { #stream模块，一般用于四层代理(TCP、UDP)，请看下方示例，仅作参考，请不要直接复制运行
	#include /etc/nginx/forward.conf; #引用其他的配置文件，即可将下方的一部分写到另一个配置文件里，灵活使用
	##########################################
	upstream test1 {
		#默认均衡方式为轮询
		#hash $remote_addr consistent; #根据来访IP分流(常用)
		#least_conn; #最少连接数配置(商业版本)
		#random 随机
		server test1.com:8080 [weight 1(设置权重)];
		server test2.com:8080 [backup (设置备机,其他server均不可用时会启用,均衡方式为hash时不可用)];
		server test3.com:8080 [down (标记为不可用，一般用不到)];
		server test4.com:8080 [max_fails=number(失败尝试最大次数,超过后标记为不可用,默认为1)] [fail_timeout=time (定义超时后不可用标记保持多长时间,默认为10s)];
	}
	server {
		listen 8080 reuseport; 
		listen 8080 udp reuseport;
		proxy_pass test1;
		#proxy_bind 1.1.1.1; #当本机有多个IP时，指定用哪个做出口
	} 
	##########################################
	#后端只有一个时proxy_pass可以直接写域名端口
	server {
		listen 8081 reuseport;
		listen 8081 udp reuseport;
		proxy_pass test1.com:8080;
	}
	##########################################
	server {
		listen 443 reuseport ssl; 对本地TCP的8080端口进行tls加密
		proxy_pass 127.0.0.1:8080;
		ssl_certificate    /etc/nginx/tls/full_chain.pem;	
		ssl_certificate_key    /etc/nginx/tls/private.key;
		ssl_protocols       TLSv1.2 TLSv1.3;
		ssl_ciphers  ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	}
	server {
		listen 8082 reuseport;
		proxy_ssl on; #上方TCP加密对应的解密
		proxy_ssl_protocols TLSv1.2 TLSv1.3;
		proxy_pass test1.com:443;
		#以指定SNI验证证书
		proxy_ssl_server_name on;
		proxy_ssl_name update.microsoft.com;
	}
	##########################################
	server { #通过nginx实现sniproxy的功能，即无证书反代https
		listen 143 reuseport;
		
		#以指定SNI验证证书
		proxy_ssl_server_name on;
		proxy_ssl_name update.microsoft.com;

		ssl_preread	on; #在preread阶段启用从ClientHello消息中提取信息，可以提取到请求Host
		#proxy_protocol on; #haproxy的proxy protocol协议，可以将真实请求IP发送至后端，这个需要和后端同时修改
		proxy_pass $sniproxy; #反代下下方的map
		proxy_connect_timeout 10s;#连接后端的超时时间
		proxy_timeout 10s; #接收后端的超时时间
		proxy_next_upstream_timeout 10s; #重试最大超时时间，默认0，即不限制
		tcp_nodelay on; #禁用Nagle，默认项，对延迟不敏感的可以尝试开启
		error_log  /var/log/nginx/sniproxy.error.log warn; #记录日志
	}
	map $ssl_preread_server_name $sniproxy { #根据$ssl_preread_server_name来分流
		test1.com test1; #域名为test1.com时，反代到test1后端
		test2.com test2; #域名为test2.com时，反代到test2后端
		default   test2.com;#若没匹配到上边的域名，则反带到test2后端
	}
	upstream test1 {#参考上边的stream规则
		server test1.com;
		server test1.cn;
	}
	upstream test2 {
		server test2.com;
		server test2.cn;
	}
}
http {
	include       /etc/nginx/mime.types; #设定mime类型,类型由mime.type文件定义(我也不知道干啥的)
    default_type  application/octet-stream; 
	#定义 access日志的格式，详细参数可以在网上自行搭配 
	log_format  access  时间:$time_iso8601|请求头地址:$http_x_forwarded_for|ProxyProtocol地址:$proxy_protocol_addr|实际请求地址:$remote_addr|状态:$status|请求URL:$scheme://$http_host$request_uri|用户Agent:$http_user_agent;
       
	sendfile       on; #特殊的数据传输功能
    tcp_nopush     on; #优化
    tcp_nodelay    on; #优化
    
	#压缩
    gzip  on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/x-httpd-PHP image/jpeg image/gif image/png;
	
	server_tokens off; #隐藏nginx版本号
	include /etc/nginx/conf.d/*.conf; #引入/etc/nginx/conf.d/下所有后缀为.conf的配置文件
	
	#禁止不匹配的server_name 访问，default_server为匹配不到server_name的来匹配此server
	server {
		listen 80 default_server;
		server_name _;
		return 404;
	}
	#443端口需要使用一个tls证书，文件里配置了
	server {
		listen 443 default_server;
		server_name _;
		return 404;
		ssl_certificate /etc/nginx/127.0.0.1.crt;
		ssl_certificate_key /etc/nginx/127.0.0.1.key;
	}
	#http跳转https
	server
	{
		listen 80;
		server_name  test.com;
		rewrite ^(.*)$ https://${server_name}$1 permanent;
	}
	#www跳转no www
	server {
        listen 80;
        server_name www.test.com;
        return 301 http://test.com$request_uri; #也可以直接跳转到https
	}
	#做站案例
	server
	{
		listen 443 ssl http2 reuseport proxy_protocol;
		server_name  test.com;
	
		#传递真实IP，haproxy protocol，需前后端协作使用
		set_real_ip_from 10.0.0.10;
		real_ip_header proxy_protocol;

		#ssl参数设置参考
		ssl_certificate    /etc/nginx/tls/test.com/full_chain.pem;
		ssl_certificate_key    /etc/nginx/tls/test.com/private.key;
		ssl_protocols       TLSv1.2 TLSv1.3;
		ssl_ciphers  ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
		ssl_early_data on;
		ssl_stapling on;
		ssl_stapling_verify on;
		ssl_session_cache    shared:SSL:1m;
		ssl_session_timeout  5m;

		#网站根目录
		index index.php;
		root /web/test/;
		
		#将所有的uri都定向到/
		location / {
			rewrite .* https://test.com break;
		}
		
		#重定向某个uri，配合jump.html实现域名跳转
		location /test {
			index index.html;
			alias /web/test/;
		}
		
		#PHP
		location  ~ [^/]\.php(/|$) {
			include        fastcgi_params; 
			fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
			fastcgi_pass unix:/run/php/php7.3-fpm.sock;
		} 
		#日志位置
		access_log  /var/log/nginx/test.access.log access;引用上方定义的access日志
		error_log  /var/log/nginx/test.error.log;
	}
}





